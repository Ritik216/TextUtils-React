{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.1.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","_useState","useState","_useState2","_slicedToArray","btnText","setbtnText","_useState3","color","backgroundColor","_useState4","myStyle","setMyStyle","React","createElement","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","data-bs-parent","onClick","Navbar","props","concat","mode","href","title","aria-label","Link","aria-current","to","aboutText","toggleMode","aria-checked","role","htmlFor","TextForm","text","setText","Fragment","heading","value","onChange","event","target","rows","placeholder","newText","toUpperCase","showalert","toLowerCase","split","length","Alert","alert","msg","defaultProps","App","setalert","message","setTimeout","setMode","Router","document","body","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.0c12950e.chunk.js","sourcesContent":["import React,{useState} from \"react\";\r\n\r\nexport default function About() {\r\n    const [btnText, setbtnText] = useState(\"Enable Dark Mode\")\r\n    const [myStyle, setMyStyle] = useState(\r\n        {\r\n            color: 'black',\r\n            backgroundColor: 'white'\r\n        }\r\n    )\r\n    const setTheme=()=>{\r\n        if(myStyle.color==='white'){\r\n            setMyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white'\r\n            })\r\n            setbtnText(\"Enable Dark Mode\");\r\n        }\r\n        else{\r\n            setMyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black'\r\n            })\r\n            setbtnText(\"Enable Light Mode\");\r\n        }\r\n    }\r\n  return (\r\n\r\n    <div className=\"container\" style={myStyle} id=\"About\">\r\n      <h1 className=\"my-3\">About Us</h1>\r\n      <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button onClick={setTheme} className=\"btn btn-primary aboutbutton\">{btnText}</button>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} ritik`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand atag\" href=\"#TextForm\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link atag\" aria-current=\"page\" to=\"/\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link atag\"  to=\"/about\">{props.aboutText}</Link>\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n          </form> */}\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} aria-checked={true} role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  </nav>  \r\n  );\r\n}\r\nNavbar.propTypes={\r\n    title: PropTypes.string,\r\n    aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps={\r\n    title: 'TextUtils',\r\n    aboutText: 'About'\r\n}\r\n\r\n","import React, { useState } from 'react';\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpperCase = () => {\r\n        // console.log(text)\r\n        // console.log(\"Button Clicked\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showalert(\"Converted to Upper Case\",\"success\")\r\n   \r\n    };\r\n\r\n    const handleLowerCase = () => {\r\n        // console.log(text)\r\n        // console.log(\"Button Clicked\");\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showalert(\"Converted to Lower Case\",\"success\")\r\n\r\n    };\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n\r\n    };\r\n    const [text, setText] = useState(\"\");\r\n    // console.log(text);\r\n    // console.log(setText);\r\n    return (\r\n        <>\r\n            <div className='container' id='TextForm' style={{color: props.mode==='dark'?'white':'black'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode === 'dark' ? '#149154' : 'white', color: props.mode==='dark'?'white':'black' }} id=\"myBox\" rows=\"8\" placeholder='Enter Text Here'></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary textbutton\" onClick={handleUpperCase}>Convert to Upper Case</button>\r\n                <button className=\"btn btn-primary textbutton\" onClick={handleLowerCase}>Convert to Lower Case</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n                <h1>Your Text Summary</h1>\r\n                <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").length} Minutes to read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text:\"Enter something in the textbox above to preview it\"}</p>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n    {props.alert.type}...{props.alert.msg}\r\n</div>\r\n  )\r\n}\r\n","// import logo from './logo.svg';\nimport \"./App.css\";\nimport About from './components/About';\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm.1\";\nimport Alert from \"./components/Alert\";\nimport React, { useState } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Routes,\n} from \"react-router-dom\";\n\nfunction App() {\n  // https://v5.reactrouter.com/web/api/Switch ---> Documentation of react router\n\n\n  // Enabling dark and light mode in textform\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n\n      document.body.style.backgroundColor = \"#211b4a\";\n      showalert(\"Dark Mode Enabled\", \"success\");\n      document.title = \"Dark Mode Enabled\";\n    } else {\n      setMode(\"light\");\n\n      document.body.style.backgroundColor = \"white\";\n      showalert(\"Light Mode Enabled\", \"success\");\n      document.title = \"Light Mode Enabled\";\n    }\n  };\n\n  // Given below state is for alert\n  const [alert, setalert] = useState(null);\n\n  // This method is for setting type and msg for alert\n  const showalert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n  };\n\n  // Given below state is for dark and light mode\n  const [mode, setMode] = useState(\"light\");\n  return (\n    <>\n    <Router>\n      <Navbar\n        title=\"TextUtils\"\n        aboutText=\"About\"\n        mode={mode}\n        toggleMode={toggleMode}/>\n      {/* <Navbar title=\"TextUtils\"/> */}\n      {/* <Navbar/> */}\n      <Alert alert={alert} />\n     \n\n      <div className=\"container my-3\">\n      <Routes>\n\n      <Route path=\"/about\" element={<About />} />\n\n      <Route path=\"/\" element={<TextForm showalert={showalert} heading=\"Enter the text to analyze below\" mode={mode} />} />\n\n        {/* The Syntax below only works for old version */}\n          {/* <Route path=\"/about\">\n            <About/>\n          </Route> */}\n          {/* <Route path=\"/\">\n          <TextForm\n          showalert={showalert}\n          heading=\"Enter the text to analyze below\"\n          mode={mode}\n          />\n          </Route> */}\n        </Routes>\n      </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}